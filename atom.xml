<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://acoldfront.github.io/</id>
    <title>Crazer的自留地</title>
    <updated>2020-10-30T02:48:08.604Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://acoldfront.github.io/"/>
    <link rel="self" href="https://acoldfront.github.io/atom.xml"/>
    <subtitle>静坐长思己过，闲谈莫论人非</subtitle>
    <logo>https://acoldfront.github.io/images/avatar.png</logo>
    <icon>https://acoldfront.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Crazer的自留地</rights>
    <entry>
        <title type="html"><![CDATA[layuiAdmin std v1.x 【iframe版】开发者文档]]></title>
        <id>https://acoldfront.github.io/post/layuiadmin-std-v1x/</id>
        <link href="https://acoldfront.github.io/post/layuiadmin-std-v1x/">
        </link>
        <updated>2020-10-29T15:52:38.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>layuiAdmin.std（iframe 版） 是完全基于 layui 架构而成的通用型后台管理模板系统，采用传统的 iframe 多页面开发模式，可更快速直接地开发网页后台应用程序，无需过多地学习成本，简单高效，撸起袖子直接干。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>layuiAdmin.std（iframe 版） 是完全基于 layui 架构而成的通用型后台管理模板系统，采用传统的 iframe 多页面开发模式，可更快速直接地开发网页后台应用程序，无需过多地学习成本，简单高效，撸起袖子直接干。</p>
</blockquote>
<!-- more -->
<h2 id="题外">题外</h2>
<hr>
<ul>
<li>该文档适用于 layuiAdmin.std 常规版（iframe），阅读之前请务必确认是否与你使用的版本对应。</li>
<li>熟练掌握 layuiAdmin 的前提是熟练掌握 layui，因此除了本篇文档， <a href="https://www.layui.com/doc/">layui 的文档</a> 也是必不可少的存在。</li>
</ul>
<h2 id="快速上手">快速上手</h2>
<hr>
<h3 id="目录说明">目录说明</h3>
<p>解压文件后，你将看到以下目录：</p>
<ul>
<li>
<p><strong>src/</strong></p>
<p>layuiAdmin 源代码，通常用于开发环境（如本地）。</p>
<ul>
<li><strong>src/layuiadmin/：</strong> layuiAdmin 的静态资源（JS、CSS、模块碎片等）
<ul>
<li>src/layuiadmin/json/：模拟接口返回的 JSON 相应信息，实际应用时可无视。</li>
<li>src/layuiadmin/layui/：layui 基础框架，功能一般领先于官网提供下载的版本。</li>
<li>src/layuiadmin/lib/：layuiAdmin 的核心模块，通常不建议修改。</li>
<li>src/layuiadmin/modules/：layuiAdmin 的业务模块</li>
<li>src/layuiadmin/style/：layuiAdmin 的样式文件</li>
<li>src/layuiadmin/tpl/：layuiAdmin 部分区块可能用到的模版碎片</li>
<li>src/layuiadmin/config.js：全局配置文件</li>
</ul>
</li>
<li><strong>src/views/：</strong> layuiAdmin 提供的视图文件，你可以将其移动到你服务端工程的 view 层中，注意修改 JS/CSS 的路径即可。</li>
</ul>
</li>
<li>
<p><strong>dist/</strong></p>
<p>通过 gulp 将 资源包的 src 目录的源代码进行构建后生成的目录（即：将 JS 和 CSS 文件进行了压缩等处理），通常用于线上环境。关于 gulp 的使用，下文也有介绍。</p>
</li>
</ul>
<h3 id="部署到服务端">部署到服务端</h3>
<ol>
<li>将 src 目录中的 views 文件夹整个复制到你 服务端工程 的 view 层中，通过本地 web 服务器访问（Tomcat / IIS / Apache / Nginx 等）</li>
<li>确保可以访问后，修改好 HTML 文件中的 JS/CSS 路径，即可正常运行页面。</li>
</ol>
<blockquote>
<p><em><strong>iframe 常规版</strong></em> 相比于 <em><strong>单页面模式的专业版</strong></em> ，无论是在目录结构还是开发模式上都要简单很多。因为单页版是接管了服务端 MVC 的视图层，而 iframe 版则将视图交给了服务端来控制和输出，可以避免鉴权的复杂程度，直接可衔接好新老项目（因为你们的大部分老项目都是采用 iframe 模式）。</p>
</blockquote>
<h3 id="全局配置">全局配置</h3>
<p>当你已经顺利在本地预览了 layuiAdmin 后，你一定迫不及待关注更深层的结构。假设你页面引入的是 src 目录 的 JS，你还需要关注的是 src/layuiadmin/<br>
目录中的 config.js，它里面存储着所有的默认配置。你可以按照实际需求选择性修改：</p>
<pre><code class="language-javascript">layui.define(['laytpl', 'layer', 'element', 'util'], function(exports){
  exports('setter', {
    container: 'LAY_app' //容器ID
    ,base: layui.cache.base //记录静态资源所在路径
    ,views: layui.cache.base + 'tpl/' //动态模板所在目录
    ,entry: 'index' //默认视图文件名
    ,engine: '.html' //视图文件后缀名
    ,pageTabs: true //是否开启页面选项卡功能。iframe 版推荐开启
    
    ,name: 'layuiAdmin'
    ,tableName: 'layuiAdmin' //本地存储表名
    ,MOD_NAME: 'admin' //模块事件名
    
    ,debug: true //是否开启调试模式。如开启，接口异常时会抛出异常 URL 等信息

    //自定义请求字段
    ,request: {
      tokenName: false //自动携带 token 的字段名（如：access_token）。可设置 false 不携带。
    }
    
    //自定义响应字段
    ,response: {
      statusName: 'code' //数据状态的字段名称
      ,statusCode: {
        ok: 0 //数据状态一切正常的状态码
        ,logout: 1001 //登录状态失效的状态码
      }
      ,msgName: 'msg' //状态信息的字段名称
      ,dataName: 'data' //数据详情的字段名称
    }
    
    //扩展的第三方模块
    ,extend: [
      'echarts', //echarts 核心包
      'echartsTheme' //echarts 主题
    ]
    
    //主题配置
    ,theme: {
      //配色方案，如果用户未设置主题，第一个将作为默认
      color: [{
        main: '#20222A' //主题色
        ,selected: '#009688' //选中色
        ,logo: '' //logo区域背景色
        ,header: '' //头部区域背景色
        ,alias: 'default' //默认别名
      }] //为了减少篇幅，更多主题此处不做列举，可直接参考 config.js

      //初始的颜色索引，对应上面的配色方案数组索引
      //如果本地已经有主题色记录，则以本地记录为优先，除非清除 LocalStorage（步骤：F12呼出调试工具→Aplication→Local Storage→选中页面地址→layuiAdmin→再点上面的X）
      // 1.0 正式版开始新增
      ,initColorIndex: 0
    }
  });
});
</code></pre>
<h2 id="基础方法">基础方法</h2>
<hr>
<ul>
<li>config 模块</li>
</ul>
<p>​    你可以在任何地方通过 layui.setter 得到 config.js 中的配置信息。如：</p>
<pre><code>layui.setter.base
</code></pre>
<ul>
<li>admin 模块</li>
</ul>
<pre><code>var admin = layui.admin;
</code></pre>
<ul>
<li>admin.req(options)</li>
</ul>
<p>​    Ajax 请求，用法同 $.ajax(options)，只是该方法会进行错误处理</p>
<ul>
<li>admin.screen()</li>
</ul>
<p>​    获取屏幕类型，根据当前屏幕大小，返回 0 - 3 的值</p>
<pre><code>0: 低于768px的屏幕
1：768px到992px之间的屏幕
2：992px到1200px之间的屏幕
3：高于1200px的屏幕
</code></pre>
<ul>
<li>admin.sideFlexible(status)</li>
</ul>
<p>​    侧边伸缩。</p>
<p>​    status 为 null：收缩；</p>
<p>​    status为 “spread”：展开</p>
<ul>
<li>admin.on(eventName, callback)</li>
</ul>
<p>​    事件监听，下文会有讲解</p>
<ul>
<li>admin.popup(options)</li>
</ul>
<p>​    弹出一个 layuiAdmin 主题风格的 layer 层，参数 options 跟 layer.open(options) 完全相同</p>
<ul>
<li>admin.popupRight(options)</li>
</ul>
<p>​    在屏幕右侧呼出一个面板层。options 同上。</p>
<pre><code class="language-javascript">admin.popupRight({
  id: 'LAY-popup-right-new1' //定义唯一ID，防止重复弹出
  ,success: function(){
    //将 views 目录下的某视图文件内容渲染给该面板
    layui.view(this.id).render('视图文件所在路径');
  }
});
</code></pre>
<ul>
<li>admin.resize(callback)</li>
</ul>
<p>​    窗口 resize 事件处理，我们推荐你使用该方法取代 jQuery 的 resize 事件，以避免多页面标签下可能存在的冲突。</p>
<ul>
<li>admin.fullScreen()</li>
</ul>
<p>​    全屏</p>
<ul>
<li>admin.exitScreen()</li>
</ul>
<p>​    退出全屏</p>
<ul>
<li>
<p>admin.events</p>
<ul>
<li>admin.events.refresh()</li>
</ul>
<p>​       刷新当前右侧区域</p>
<ul>
<li>admin.events.closeThisTabs()</li>
</ul>
</li>
</ul>
<p>​       关闭当前标签页<br>
注意：如果是在 iframe 页面中执行关闭，需要如下写法：</p>
<pre><code>parent.layui.admin.events.closeThisTabs();
</code></pre>
<ul>
<li>admin.events.closeOtherTabs()</li>
</ul>
<p>​       关闭其它标签页</p>
<ul>
<li>admin.events.closeAllTabs()</li>
</ul>
<p>​       关闭全部标签页</p>
<ul>
<li>view 模块</li>
</ul>
<p>​    用法同 专业版：<a href="http://fly.layui.com/docs/5/#base-view">http://fly.layui.com/docs/5/#base-view</a></p>
<h2 id="在-iframe-页面内部打开新标签">在 iframe 页面内部打开新标签</h2>
<hr>
<blockquote>
<p>通常你会涉及一些在右侧 iframe 页面内部去打开一个新标签的需求，目前有以下方式可以实现</p>
</blockquote>
<h3 id="方法一">方法一：</h3>
<p>直接在 a 标签上加上相关属性</p>
<pre><code class="language-html">&lt;a lay-href=&quot;url&quot;&gt;文本&lt;/a&gt;
</code></pre>
<h3 id="方法二">方法二：</h3>
<p>调用 index 模块的相关方法</p>
<pre><code class="language-javascript">parent.layui.index.openTabsPage(href, text); //这里要注意的是 parent 的层级关系
</code></pre>
<h2 id="自定义标签栏标题">自定义标签栏标题</h2>
<hr>
<p>每当你打开一个标签页，头部都会出现标题。它默认读取的是所点元素的文本，但是你也可以自定义标题。</p>
<pre><code class="language-html">&lt;a lay-href=&quot;url&quot; lay-text=&quot;自定义标题文本&quot;&gt;默认读取的文本&lt;/a&gt;
</code></pre>
<ul>
<li>值得说明的是，只要你配置了上述的 lay-href 属性，就会打开一个新的标签，如果要在当前标签跳转，直接配置 href=&quot;&quot; 属性即可。</li>
</ul>
<h2 id="实用组件">实用组件</h2>
<hr>
<h3 id="hover-提示层">Hover 提示层</h3>
<p>通过对元素设置 lay-tips=&quot;提示内容&quot; 来开启一个 hover 提示，如：</p>
<pre><code class="language-html">&lt;i class=&quot;layui-icon layui-icon-tips&quot; lay-tips=&quot;要支持的噢&quot; lay-offset=&quot;5&quot;&gt;&lt;/i&gt;
</code></pre>
<p>其中 lay-offset 用于定于水平偏移距离（单位px），以调整箭头让其对准元素</p>
<h2 id="兼容性">兼容性</h2>
<hr>
<p>layuiAdmin 使用到了 layui 的栅格系统，而栅格则是基于浏览器的媒体查询。ie8、9不支持。<br>
所以要在宿主页面（如 start/index.html ）加上下面这段保证兼容：</p>
<pre><code class="language-html">&lt;!-- 让IE8/9支持媒体查询，从而兼容栅格 --&gt;
&lt;!--[if lt IE 9]&gt;
  &lt;script src=&quot;https://cdn.staticfile.org/html5shiv/r29/html5.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://cdn.staticfile.org/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;  
</code></pre>
<h2 id="升级事项">升级事项</h2>
<hr>
<p>从官网更新资源包后，以 src 目录为例（dist 由于是 src 构建后生成的目录，所以本质是和 src 一样的）<br>
src 目录下可以直接覆盖的有：</p>
<blockquote>
<p>src/json/<br>
src/layui/<br>
src/lib/<br>
src/style/</p>
</blockquote>
<p>需要灵活调配的有：</p>
<blockquote>
<p>src/modules/<br>
src/tpl/<br>
src/config.js</p>
</blockquote>
<p>如果没有改动默认配置，事实上 config.js 也可以覆盖升级</p>
<h2 id="源码构建">源码构建</h2>
<hr>
<p>当你在 src 目录完成开发后，你可通过 gulp 对 src 源码进行自动化构建，以生成用于线上环境的 dist 目录。并在 HTML 源代码中引入该目录的 JS/CSS。</p>
<p>在资源包中根目录下看到的 gulpfile.js 是 layuiAdmin 写好的任务脚本，package.json 是任务配置文件，你只需按照以下步骤：</p>
<ul>
<li>step1：确保你的电脑已经安装好了 <a href="https://nodejs.org/en/">Node.js</a>，如果未安装，可去官网下载安装</li>
<li>step2: 命令行安装 gulp：npm install gulp -g</li>
<li>step3：切换到 layuiAdmin 项目根目录（即 gulpfile.js 所在目录），命令行安装任务所依赖的包：npm install</li>
</ul>
<p><strong>安装完成后，后续只需直接执行命令：gulp 即可完成 src 到 dist 目录的构建</strong></p>
<h1 id="关于版权"><strong>关于版权</strong></h1>
<hr>
<blockquote>
<p>layuiAdmin 受国家计算机软件著作权保护，未经官网正规渠道授权擅自公开产品源文件、以及直接对产品二次出售的，我们将追究相应的法律责任。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[layuiAdmin pro v1.x 【单页版】开发者文档]]></title>
        <id>https://acoldfront.github.io/post/layuiadmin-pro-v1x/</id>
        <link href="https://acoldfront.github.io/post/layuiadmin-pro-v1x/">
        </link>
        <updated>2020-10-29T14:39:23.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>layuiAdmin pro 是完全基于 layui 架构而成的后台管理模板系统，可以更轻松地实现前后端分离，它是mvc 的简化版，全面接管  视图 和  页面路由 ，并可自主完成数据渲染，服务端通常只负责数据接口，而前端只需专注视图和事件交互，所有的页面动作都是在一个宿主页面中完成，因此这赋予了layuiAdmin 单页面应用开发的能力。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>layuiAdmin pro 是完全基于 layui 架构而成的后台管理模板系统，可以更轻松地实现前后端分离，它是mvc 的简化版，全面接管  视图 和  页面路由 ，并可自主完成数据渲染，服务端通常只负责数据接口，而前端只需专注视图和事件交互，所有的页面动作都是在一个宿主页面中完成，因此这赋予了layuiAdmin 单页面应用开发的能力。</p>
</blockquote>
<!-- more -->
<h1 id="题外"><strong>题外</strong></h1>
<hr>
<ul>
<li>该文档适用于 layuiAdmin 专业版（单页面），阅读之前请务必确认是否与你使用的版本对应。</li>
<li>熟练掌握 layuiAdmin 的前提是熟练掌握 layui，因此除了本篇文档， <a href="http://www.layui.com/doc/">layui 的文档</a> 也是必不可少的存在。</li>
</ul>
<h1 id="快速上手"><strong>快速上手</strong></h1>
<hr>
<h3 id="部署"><strong>部署</strong></h3>
<ol>
<li>解压文件后，将 layuiAdmin 完整放置在任意目录</li>
<li>通过本地 web 服务器去访问 ./start/index.html 即可运行 Demo</li>
</ol>
<blockquote>
<p>由于 layuiAdmin 可采用前后端分离开发模式，因此你无需将其放置在你的服务端 MVC 框架中，你只需要给 layuiAdmin 主入口页面（我们也称之为：宿主页面）进行访问解析，它即可全权完成自身路由的跳转和视图的呈现，而数据层则完全通过服务端提供的异步接口来完成。</p>
</blockquote>
<h3 id="目录说明"><strong>目录说明</strong></h3>
<ul>
<li>
<p>src/</p>
<p>layuiAdmin 源代码，通常用于开发环境（如本地），推荐你在本地开发时，将 ./start/index.html 中的 layui.css 和 layui.js 的引入路径由 dist 改为 src 目录。</p>
<ul>
<li>src/controller/：存放 JS 业务模块，即对视图进行事件等交互性处理</li>
<li>src/lib/：layuiAdmin 的核心模块，一般不推荐修改</li>
<li>src/style/：存放样式，其中 admin.css是核心样式</li>
<li>src/views/：存放视图文件。其中 layout.html 是整个框架结构的承载，一般不推荐做大量改动。</li>
<li>src/config.js：layuiAdmin 的全局配置文件，可随意修改。</li>
<li>src/index.js：layuiAdmin 的入口模块，一般不推荐修改</li>
</ul>
</li>
<li>
<p>dist/<br>
通过 gulp 将 layuiAdmin src 目录的源代码进行构建后生成的目录（即：将 JS 和 CSS 文件进行了压缩等处理），通常用于线上环境。关于 gulp 的使用，下文也有介绍。</p>
</li>
<li>
<p>start/<br>
存放 layuiAdmin 的入口页面、模拟接口数据、layui</p>
</li>
</ul>
<h3 id="宿主页面"><strong>宿主页面</strong></h3>
<p>你所看到的 start/index.html 是我们提供好的宿主页面，它是整个单页面的承载，所有的界面都是在这一个页面中完成跳转和渲染的。事实上，宿主页面可以放在任何地方，但是要注意修改里面的<code>&lt;link&gt; &lt;script&gt;</code>的 src 和 layui.config 中 base 的路径。</p>
<h3 id="全局配置"><strong>全局配置</strong></h3>
<p>当你已经顺利在本地预览了 layuiAdmin 后，你一定迫不及待关注更深层的结构。打开 src 目录，你将看到 config.js，里面存储着所有的默认配置。你可以按照实际需求选择性修改，下面是 layuiAdmin 默认提供的配置：</p>
<pre><code class="language-javascript">layui.define(['laytpl', 'layer', 'element', 'util'], function(exports){
  exports('setter', {
    container: 'LAY_app' //容器ID
    ,base: layui.cache.base //记录layuiAdmin文件夹所在路径
    ,views: layui.cache.base + 'views/' //视图所在目录
    ,entry: 'index' //默认视图文件名
    ,engine: '.html' //视图文件后缀名
    ,pageTabs: false //是否开启页面选项卡功能。单页版不推荐开启
    
    ,name: 'layuiAdmin Pro'
    ,tableName: 'layuiAdmin' //本地存储表名
    ,MOD_NAME: 'admin' //模块事件名
    
    ,debug: true //是否开启调试模式。如开启，接口异常时会抛出异常 URL 等信息
    
    ,interceptor: false //是否开启未登入拦截
    
    //自定义请求字段
    ,request: {
      tokenName: 'access_token' //自动携带 token 的字段名。可设置 false 不携带。
    }
    
    //自定义响应字段
    ,response: {
      statusName: 'code' //数据状态的字段名称
      ,statusCode: {
        ok: 0 //数据状态一切正常的状态码
        ,logout: 1001 //登录状态失效的状态码
      }
      ,msgName: 'msg' //状态信息的字段名称
      ,dataName: 'data' //数据详情的字段名称
    }
    
    //独立页面路由，可随意添加（无需写参数）
    ,indPage: [
      '/user/login' //登入页
      ,'/user/reg' //注册页
      ,'/user/forget' //找回密码
      ,'/template/tips/test' //独立页的一个测试 demo
    ]
    
    //扩展的第三方模块
    ,extend: [
      'echarts', //echarts 核心包
      'echartsTheme' //echarts 主题
    ]
    
    //主题配置
    ,theme: {
      //配色方案，如果用户未设置主题，第一个将作为默认
      color: [{
        main: '#20222A' //主题色
        ,selected: '#009688' //选中色
        ,logo: '' //logo区域背景色
        ,header: '' //头部区域背景色
        ,alias: 'default' //默认别名
      }] //为了减少篇幅，更多主题此处不做列举，可直接参考 config.js

      //初始的颜色索引，对应上面的配色方案数组索引
      //如果本地已经有主题色记录，则以本地记录为优先，除非清除 localStorage（步骤：F12呼出调试工具→Aplication→Local Storage→选中页面地址→layuiAdmin→再点上面的X）
      // 1.0 正式版开始新增
      ,initColorIndex: 0
    }
  });
});
</code></pre>
<h3 id="侧边菜单"><strong>侧边菜单</strong></h3>
<ul>
<li>在 start/json/menu.js 文件中，我们放置了默认的侧边菜单数据，你可以去随意改动它。</li>
<li>如果你需要动态加载菜单，你需要将 views/layout.html 中的对应地址改成你的真实接口地址</li>
</ul>
<p>侧边菜单最多可支持到三级。无论你采用静态的菜单还是动态的，菜单的数据格式都必须是一段合法的 JSON，且必须符合以下规范：</p>
<pre><code class="language-json">{
  &quot;code&quot;: 0 //状态码，key 名可以通过 config.js 去重新配置
  ,&quot;msg&quot;: &quot;&quot; //提示信息
  ,&quot;data&quot;: [{ //菜单数据，key名可以通过 config.js 去重新配置
    &quot;name&quot;: &quot;component&quot; //一级菜单名称（与视图的文件夹名称和路由路径对应）
    ,&quot;title&quot;: &quot;组件&quot; //一级菜单标题
    ,&quot;icon&quot;: &quot;layui-icon-component&quot; //一级菜单图标样式
    ,&quot;jump&quot;: '' //自定义一级菜单路由地址，默认按照 name 解析。一旦设置，将优先按照 jump 设定的路由跳转
    ,&quot;spread&quot;: true //是否默认展子菜单（1.0.0-beta9 新增）
    ,&quot;list&quot;: [{ //二级菜单
      &quot;name&quot;: &quot;grid&quot; //二级菜单名称（与视图的文件夹名称和路由路径对应）
      ,&quot;title&quot;: &quot;栅格&quot; //二级菜单标题
      ,&quot;jump&quot;: ''  //自定义二级菜单路由地址
      ,&quot;spread&quot;: true //是否默认展子菜单（1.0.0-beta9 新增）
      ,&quot;list&quot;: [{ //三级菜单
        &quot;name&quot;: &quot;list&quot; //三级菜单名（与视图中最终的文件名和路由对应），如：component/grid/list
        ,&quot;title&quot;: &quot;等比例列表排列&quot; //三级菜单标题
      },{
        &quot;name&quot;: &quot;mobile&quot;
        ,&quot;title&quot;: &quot;按移动端排列&quot;
      }
    }]
}
</code></pre>
<blockquote>
<p>TIPS：实际运用时，切勿出现上述中的注释，否则将不是合法的 JSON ，会出现解析错误。</p>
</blockquote>
<p>需要注意的是以下几点：</p>
<ol>
<li>
<p>当任意级菜单有子菜单，点击该菜单都只是收缩和展开操作，而并不会跳转，只有没有子菜单的菜单才被允许跳转。</p>
</li>
<li>
<p>菜单的路由地址默认是按照菜单层级的 name 来设定的。</p>
<p>我们假设一级菜单的 name 是：a，二级菜单的是：b，三级菜单的 name 是 c，那么：</p>
<ul>
<li>三级菜单最终的路由地址就是：<code>/a/b/c</code></li>
<li>如果二级菜单没有三级菜单，那么二级菜单就是最终路由，地址就是：<code>/a/b/</code></li>
<li>如果一级菜单没有二级菜单，那么一级菜单就是最终路由，地址就是：<code>/a/</code></li>
</ul>
</li>
<li>
<p>但如果你设置了 参数 jump，那么就会优先读取 jump 设定的路由地址，如：<code>&quot;jump&quot;: &quot;/user/set&quot;</code></p>
</li>
</ol>
<h1 id="路由">路由</h1>
<hr>
<p>layuiAdmin 的路由是采用 <code>location.hash</code> 的机制，即路由地址是放在 <code>./#/</code> 后面，并通过 layui 自带的方法：<code>layui.router()</code> 来进行解析。每一个路由都对应一个真实存在的视图文件，且路由地址和视图文件的路径是一致的（相对 <code>views</code>目录）。因此，你不再需要通过配置服务端的路由去访问一个页面，也无需在 layuiAdmin 内部代码中去定义路由，而是直接通过 layuiAdmin 的前端路由去访问，即可匹配相应目录的视图，从而呈现出页面结果。</p>
<h3 id="路由规则"><strong>路由规则</strong></h3>
<blockquote>
<p>./#/path1/path2/path3/key1=value1/key2=value2…</p>
</blockquote>
<p>一个实际的示例：</p>
<blockquote>
<p>./#/user/set<br>
./#/user/set/uid=123/type=1#xxx（下面将以这个为例继续讲解）</p>
</blockquote>
<p>当你需要对路由结构进行解析时，你只需要通过 layui 内置的方法 <code>layui.router()</code> 即可完成。如上面的路由解析出来的结果是：</p>
<blockquote>
<p>{<br>
path: ['user','set']<br>
,search: {uid: 123, type: 1}<br>
,href: 'user/set/uid=123/type=1'<br>
,hash: 'xxx'<br>
}</p>
</blockquote>
<p>可以看到，不同的结构会自动归纳到相应的参数中，其中：</p>
<blockquote>
<ul>
<li>path：存储的是路由的目录结构</li>
<li>search：存储的是路由的参数部分</li>
<li>href：存储的是 layuiAdmin 的完整路由地址</li>
<li>hash：存储的是 layuiAdmin 自身的锚记，跟系统自带的 location.hash 有点类似</li>
</ul>
</blockquote>
<p>通过<code>layui.router()</code> 得到路由对象后，你就可以对页面进行个性化操作、异步参数传值等等。如：</p>
<pre><code class="language-javascript">//在 JS 中获取路由参数
var router = layui.router();
admin.req({
  url: 'xxx'
  ,data: {
    uid: router.search.uid
  }
});
</code></pre>
<pre><code class="language-html">&lt;!--  在动态模板中获取路由参数 --&gt;
&lt;script type=&quot;text/html&quot; template lay-url=&quot;./xxx/?uid={{ layui.router().search.uid }}&quot;&gt;
  …
&lt;/script&gt;

&lt;!-- 或 --&gt;
&lt;script type=&quot;text/html&quot; template lay-url=&quot;./xxx/&quot; lay-data=&quot;{uid:'{{ layui.router().search.uid }}'}&quot;&gt;
  …
&lt;/script&gt;
</code></pre>
<h3 id="路由跳转"><strong>路由跳转</strong></h3>
<p>通过上文的路由规则，你已经大致清楚了 layuiAdmin 路由的基本原理和解析方法。那么如何完成路由的跳转呢？</p>
<ol>
<li>在视图文件的 HTML 代码中，通过对任意元素设定<code>lay-href=&quot;/user/set/uid=123/type=1&quot;</code>，好处是：任意元素都可以触发跳转。缺点是：只能在浏览器当前选项卡完成跳转（注意：不是 layuiAdmin 的选项卡）</li>
<li>直接对 a 标签设定 href，如： <code>&lt;a href=&quot;#/user/set&quot;&gt;text&lt;/a&gt;</code> 。好处是：你可以通过设定<code>target=&quot;_blank&quot;</code>来打开一个浏览器新选项卡。缺点是：只能设置 a 标签，且前面必须加 /#/</li>
<li>在 JS 代码中，还可通过 <code>location.hash = '/user/set'</code>; 来跳转。前面无需加 #，它会自动追加。</li>
</ol>
<h3 id="路由结尾"><strong>路由结尾</strong></h3>
<p>在路由结尾部分出现的 / 与不出现，是两个完全不同的路由。比如下面这个：</p>
<ol>
<li>user/set<br>
读取的视图文件是：.views/user/set.html</li>
<li>user/set/<br>
读取的视图文件是：./views/user/set/index.html （TIPS：这里的 index.html 即是目录下的默认主视图，下文会有讲解）</li>
</ol>
<p>因此一定要注意结尾处的 /，避免视图读取错误。</p>
<h1 id="视图">视图</h1>
<hr>
<p>这或许是你应用 layuiAdmin 时的主要焦点，在开发过程中，你的大部分精力都可能会聚焦在这里。它取代了服务端 MVC 架构中的 view 层，使得应用开发变得更具扩展性。因此如果你采用 layuiAdmin 的 SPA（单页应用）模式，请务必要抛弃服务端渲染视图的思想，让页面的控制权限重新回归到前端吧！</p>
<blockquote>
<p><strong>views</strong>目录存放的正是视图文件，你可以在该目录添加任意的新目录和新文件，通过对应的路由即可访问。</p>
</blockquote>
<p>注意：如果是单页面模式，视图文件通常是一段 HTML 碎片，而不能是一个完整的 html 代码结构。</p>
<h3 id="视图与路由的关系"><strong>视图与路由的关系</strong></h3>
<p>每一个视图文件，都对应一个路由。其中<code>index.html</code>是默认文件（你也可以通过 <code>config.js</code> 去重新定义）。视图文件的所在目录决定了路由的访问地址，如：</p>
<table>
<thead>
<tr>
<th>视图路径</th>
<th>对应的路由地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>./views/user/index.html</td>
<td>/user/</td>
</tr>
<tr>
<td>./views/user.html</td>
<td>/user</td>
</tr>
<tr>
<td>./views/user/set/index.html</td>
<td>/user/set/</td>
</tr>
<tr>
<td>./views/user/set.html</td>
<td>/user/set</td>
</tr>
<tr>
<td>./views/user/set/base.html</td>
<td>/user/set/base</td>
</tr>
</tbody>
</table>
<p>通过上述的表格列举的对应关系，可以总结出：</p>
<ul>
<li>当视图文件是 index.html，那么路由地址就是它的上级目录（相对 views），以 <code>/</code> 结尾</li>
<li>当视图文件不是 index.html，那么路由地址就是它的上级目录+视图文件名，不以 <code>/</code> 结尾</li>
</ul>
<blockquote>
<p>值得注意的是：路由路径并非最多只能三级，它可以无限极。但对应的视图也必须存放在相应的层级目录下</p>
</blockquote>
<h3 id="视图中加载-js-模块"><strong>视图中加载 JS 模块</strong></h3>
<p>在视图文件中，除了写 HTML，也可以写 JavaScript 代码。如：</p>
<pre><code class="language-html">&lt;div id=“LAY-demo-hello”&gt;Hello layuiAdmin&lt;/div&gt;

&lt;script&gt;
layui.use('admin', function(){
  var $ = layui.jquery;
  admin.popup({
    content: $('#LAY-demo-hello').html()
  });
});
&lt;/script&gt;
</code></pre>
<p>如果该视图对应的 JS 代码量太大，我们更推荐你在 <code>controller</code>目录下新增一个业务模块，并在视图中直接 <code>layui.use</code> 去加载该模块。下面以控制台主页 <code>index.html</code>为例：</p>
<pre><code class="language-html">&lt;div&gt;html区域&lt;div&gt;

&lt;script&gt;
//加载 controller 目录下的对应模块
/*
  小贴士：
    这里 console 模块对应 的 console.js 并不会重复加载，
    然而该页面的视图可能会重新插入到容器，那如何保证脚本能重新控制视图呢？有两种方式：
      1): 借助 layui.factory 方法获取 console 模块的工厂（回调函数）给 layui.use
      2): 直接在 layui.use 方法的回调中书写业务代码，即:
          layui.use('console', function(){ 
            //同 console.js 中的 layui.define 回调中的代码 
          });
          
  这里我们采用的是方式1。其它很多视图中采用的其实都是方式2，因为更简单些，也减少了一个请求数。
  
*/
layui.use('console', layui.factory('console'));
&lt;/script&gt;
</code></pre>
<p>当视图被渲染后，layui.factory 返回的函数也会被执行，从而保证在不重复加载 JS 模块文件的前提下，保证脚本能重复执行。</p>
<h1 id="动态模板"><strong>动态模板</strong></h1>
<hr>
<p>layuiAdmin 的视图是一个“动静结合”的载体，除了常规的静态模板，你当然还可以在视图中存放动态模板，因此它可谓是焦点中的焦点。</p>
<h3 id="定义模板"><strong>定义模板</strong></h3>
<p>在视图文件中，通过下述规则定义模板：</p>
<pre><code class="language-html">&lt;script type=&quot;text/html&quot; template&gt;
  &lt;!-- 动态模板碎片 --&gt;
&lt;/script&gt;
</code></pre>
<p>下面是一个简单的例子：</p>
<pre><code class="language-html">&lt;script type=&quot;text/html&quot; template&gt;
  当前 layuiAdmin 的版本是：{{ layui.admin.v }}
  路由地址：{{ layui.router().href }}
&lt;/script&gt;
</code></pre>
<p>在不对动态模板设定数据接口地址的情况下，它能读取到全局对象。但更多时候，一个动态模板应该是对应一个接口地址，如下所示：</p>
<pre><code class="language-javascript">&lt;script type=&quot;text/html&quot; template lay-url=&quot;接口地址&quot;&gt;
    我叫：{{ d.data.username }}
    {{# if(d.data.sex === '男'){ }}
        公的
    {{# } else { }}
        母的
    {{# } }}
&lt;/script&gt;
</code></pre>
<p>模板中的 <code>d</code> 对应的是你接口返回的 json 转化后的一维对象，如：</p>
<pre><code class="language-json">{
  &quot;code&quot;: 0
  ,&quot;data&quot;: {
    &quot;username&quot;: &quot;贤心&quot;
    ,&quot;sex&quot;: &quot;男&quot;
  }
}
</code></pre>
<p>那么，上述动态模板最终输出的结果就是：</p>
<pre><code>我叫：贤心
公的
</code></pre>
<h3 id="模板基础属性"><strong>模板基础属性</strong></h3>
<p>动态模板支持以下基础属性</p>
<ul>
<li>lay-url<br>
用于绑定模板的数据接口地址，支持动态模板解析，如：</li>
</ul>
<pre><code class="language-html">&lt;script type=&quot;text/html&quot; template lay-url=&quot;https://api.xxx.com?id={{ layui.router().search.id }}&quot;&gt;
  &lt;!-- 动态模板碎片 --&gt;
&lt;/script&gt;
</code></pre>
<ul>
<li>lay-type<br>
用于设定模板的接口请求类型（默认：get），如：</li>
</ul>
<pre><code class="language-html">&lt;script type=&quot;text/html&quot; template lay-url=&quot;接口地址&quot; lay-type=&quot;post&quot;&gt;
  &lt;!-- 动态模板碎片 --&gt;
&lt;/script&gt;
</code></pre>
<ul>
<li>lay-data<br>
用于定义接口请求的参数，其值是一个 JavaScript object 对象，同样支持动态模板解析，如：</li>
</ul>
<pre><code class="language-html">&lt;script type=&quot;text/html&quot; template lay-url=&quot;接口地址&quot; lay-data=&quot;{id: '{{ layui.router().search.id }}', type: 1}&quot;&gt;
  &lt;!-- 动态模板碎片 --&gt;
&lt;/script&gt;
</code></pre>
<ul>
<li>lay-headers<br>
用户定义接口请求的 Request Headers 参数，用法与 lay-data 的完全类似，支持动态模板解析。</li>
<li>lay-done<br>
接口请求完毕并完成视图渲染的回调脚本，里面支持写任意的 JavaScript 语句。事实上它是一个封闭的函数作用域，通过给 Function 实例返回的函数传递一个参数 d，用于得到接口返回的数据：</li>
</ul>
<pre><code class="language-html">&lt;script type=&quot;text/html&quot; template lay-url=&quot;接口地址&quot; lay-done=&quot;console.log(d);&quot;&gt;
  &lt;!-- 动态模板碎片 --&gt;
&lt;/script&gt;
</code></pre>
<p>很多时候，你在动态模板中可能会放入一些类似于 layui 的 form 元素，而有些控件需要执行 <code>form.render()</code> 才会显示，这时，你可以对 lay-done 赋值一个全局函数，如：</p>
<pre><code class="language-html">&lt;script type=&quot;text/html&quot; template lay-url=&quot;接口地址&quot; lay-done=&quot;layui.data.done(d);&quot;&gt;
   &lt;div class=&quot;layui-form&quot; lay-filter=&quot;LAY-filter-demo-form&quot;&gt;
     &lt;input type=&quot;checkbox&quot; title=&quot;复选框&quot;&gt;
  &lt;/div&gt;
&lt;/script&gt;

&lt;!--  注意：别看眼花了，下面可不是动态模板，而是 JS 脚本区域 --&gt;
&lt;script&gt;
layui.data.done = function(d){
  layui.use(['form'], function(){
    var form = layui.form;
     form.render(null, 'LAY-filter-demo-form'); //渲染该模板下的动态表单
  });
};
&lt;/script&gt;
</code></pre>
<p>TIPS：</p>
<blockquote>
<p>如果模板渲染完毕需要处理过多的交互，我们强烈推荐你采用上述的方式定义一个全局函数赋值给 lay-done，会极大地减少维护成本。<br>
无需担心该全局函数的冲突问题，该函数是一次性的。其它页面即便声明了一个同样的函数，也只是用于新的视图，丝毫不会对之前的视图造成任何影响。<br>
layui.data.done 中的 done 可以随意命名，但需与 lay-done 的赋值对应上。</p>
</blockquote>
<p>模板语法</p>
<blockquote>
<p>动态模板基于 layui 的 laytpl 模块，详细语法可见：<br>
<a href="http://www.layui.com/doc/modules/laytpl.html#syntax">http://www.layui.com/doc/modules/laytpl.html#syntax</a></p>
</blockquote>
<h1 id="登录与接口鉴权"><strong>登录与接口鉴权</strong></h1>
<hr>
<p>由于 layuiAdmin 接管了视图层，所以不必避免可能会与服务端分开部署，这时你有必要了解一下 layuiAdmin 默认提供的：从 登录 到 接口鉴权，再到 注销 的整个流程。</p>
<h3 id="登录拦截器"><strong>登录拦截器</strong></h3>
<p>进入登入页面登入成功后，会在 localStorage 的本地表中写入一个字段。如： access_token （名称可以在 config.js 自定义）。拦截器判断没有 access_token 时，则会跳转到登入页。尽管可以通过伪造一个假的 access_token 绕过视图层的拦截，但在请求接口时，会自动带上 access_token，服务端应再次做一层校验。</p>
<h3 id="流程"><strong>流程</strong></h3>
<ol>
<li>打开 <code>config.js</code> ，将 <code>interceptor</code>参数设置为 <code>true</code>（该参数为 1.0.0-beta6 开始新增）。那么，当其未检查到 <code>access_token</code>值时，会强制跳转到登录页面，以获取 access_token。</li>
<li>打开登录对应的视图文件 <code>views/user/login.html</code>，在代码最下面，你将看到一段已经写好的代码，你需要的是将接口地址改为服务端的真实接口，并返回 <code>access_token</code>值。</li>
<li>layuiAdmin 会将服务端返回的 <code>access_token</code>值进行本地存储，这时你会发现 layuiAdmin 不再强制跳转到登录页面。并在后面每次请求服务端接口时，都会自动在参数和 <code>Request Headers</code> 中带上 <code>access_token</code>，以便服务端进行鉴权。</li>
<li>若鉴权成功，顺利返回数据；若鉴权失败，服务端的 <code>code</code>应返回 <code>1001</code>（可在 config.js 自定义） ， layuiAdmin 将会自动清空本地无效 token 并跳转到登入页。</li>
<li>退出登录：重新打开 <code>controller/common.js</code>，搜索 <code>logout</code>，配上注销接口即可。</li>
</ol>
<blockquote>
<p>如果是在其它场景请求的接口，如：<code>table.render()</code>，那么你需要获取本地存储的 token 赋值给接口参数，如下：</p>
</blockquote>
<pre><code class="language-javascript">//设置全局 table 实例的 token（这样一来，所有 table 实例均会有效）
table.set({
  headers: { //通过 request 头传递
    access_token: layui.data('layuiAdmin').access_token
  }
  ,where: { //通过参数传递
    access_token: layui.data('layuiAdmin').access_token
  }
});
 
//设置单个 table 实例的 token
table.render({
  elem: '#xxxx'
  ,url: 'url'
  ,where: {
    access_token: layui.data('layuiAdmin').access_token
  }
  //,headers: {}
});
</code></pre>
<p>事实上，layuiAdmin 的所有 Ajax 请求都是采用 <code>admin.req(options)</code>，它会自动传递 <code>access_token</code>，因此推荐你在 JS 执行 Ajax 请求时直接使用它。其中参数 *options *和 <code>$.ajax(options)</code> 的参数完全一样。</p>
<h3 id="接口鉴权"><strong>接口鉴权</strong></h3>
<p>我们推荐服务端遵循 <strong>JWT</strong>（JSON Web Token） 标准进行鉴权。对 JWT 不甚了解的同学，可以去搜索一些相关资料，会极大地增加应用的可扩展性。当然，你也可以直接采用传统的 cookie / session 机制。</p>
<h1 id="基础方法"><strong>基础方法</strong></h1>
<hr>
<ul>
<li><strong>config 模块</strong></li>
</ul>
<blockquote>
<p>你可以在任何地方通过 layui.setter 得到 config.js 中的配置信息</p>
</blockquote>
<ul>
<li><strong>admin 模块</strong></li>
</ul>
<blockquote>
<p>var admin = layui.admin;</p>
</blockquote>
<ul>
<li><strong>admin.req(options)</strong><br>
Ajax 请求，用法同 $.ajax(options)，只是该方法会进行错误处理和 token 的自动传递</li>
<li><strong>admin.screen()</strong><br>
获取屏幕类型，根据当前屏幕大小，返回 0 - 3 的值<br>
0: 低于768px的屏幕<br>
1：768px到992px之间的屏幕<br>
2：992px到1200px之间的屏幕<br>
3：高于1200px的屏幕</li>
<li><strong>admin.exit()</strong><br>
清除本地 token，并跳转到登入页</li>
<li><strong>admin.sideFlexible(status)</strong><br>
侧边伸缩。status 为 null：收缩；status为 “spread”：展开</li>
<li><strong>admin.on(eventName, callback)</strong><br>
事件监听，下文会有讲解</li>
<li><strong>admin.popup(options)</strong><br>
弹出一个 layuiAdmin 主题风格的 layer 层，参数 options 跟 layer.open(options) 完全相同</li>
<li><strong>admin.popupRight(options)</strong><br>
在屏幕右侧呼出一个面板层。options 同上。</li>
</ul>
<pre><code class="language-javascript">admin.popupRight({
  id: 'LAY-popup-right-new1' //定义唯一ID，防止重复弹出
  ,success: function(){
    //将 views 目录下的某视图文件内容渲染给该面板
    layui.view(this.id).render('视图文件所在路径');
  }
});
</code></pre>
<ul>
<li><strong>admin.resize(callback)</strong><br>
窗口 resize 事件处理，我们推荐你使用该方法取代 jQuery 的 resize 事件，以避免多页面标签下可能存在的冲突。</li>
<li><strong>admin.fullScreen()</strong><br>
全屏</li>
<li><strong>admin.exitScreen()</strong><br>
退出全屏</li>
<li><strong>admin.events</strong>
<ul>
<li><strong>admin.events.refresh()</strong><br>
刷新当前右侧区域</li>
<li><strong>admin.events.closeThisTabs()</strong><br>
关闭当前标签页</li>
<li><strong>admin.events.closeOtherTabs()</strong><br>
关闭其它标签页</li>
<li><strong>admin.events.closeAllTabs()</strong><br>
关闭全部标签页</li>
</ul>
</li>
<li><strong>view 模块</strong></li>
</ul>
<blockquote>
<p>var view = layui.view;</p>
</blockquote>
<ul>
<li><strong>view(id)</strong><br>
获取指定容器，并返回一些视图渲染的方法，如：</li>
</ul>
<pre><code class="language-javascript">//渲染视图，viewPath 即为视图路径
view('id').render(viewPath).then(function(){
    //视图文件请求完毕，视图内容渲染前的回调
}).done(function(){
   //视图文件请求完毕和内容渲染完毕的回调
}); 

//直接向容器插入 html，tpl 为 模板字符；data 是传入的数据。该方法会自动完成动态模板解析
view('id').send(tpl, data); 
</code></pre>
<p>另外，<code>render</code>方法支持动态传参，以用于视图内容接受。如：</p>
<pre><code class="language-javascript">admin.popup({
  id: 'LAY-popup-test1'
  ,success: function(){
    view(this.id).render('视图文件所在路径', {
       id: 123 //这里的 id 值你可以在一些事件中动态获取（如 table 模块的编辑）
    });
  }
});
</code></pre>
<p>那么，在视图文件中，你可以在动态模板中通过 {{ <a href="http://d.params.xxx/">d.params.xxx</a> }} 得到传入的参数，如：</p>
<pre><code class="language-html">&lt;script type=&quot;text/html&quot; template lay-url=&quot;http://api.com?id={{ d.params.id }}&quot;&gt;
  配置了接口的动态模板，且接口动态获取了 render 传入的参数：{{ d.params.id }}
&lt;/script&gt;

&lt;script type=&quot;text/html&quot; template&gt;
  也可以直接获取：&lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;{{ d.params.id }}&quot;&gt;
&lt;/script&gt;
</code></pre>
<p><strong>而如果是在 JS 语句中去获取模板传递过来的变量，可以借助动态模板的 lay-done 属性去实现，如:</strong></p>
<pre><code class="language-html">&lt;script type=&quot;text/html&quot; template lay-done=&quot;layui.data.sendParams(d.params)&quot;&gt;
  
&lt;/script&gt;
</code></pre>
<p>然后在 JS 语句中通过执行动态模板 lay-done 中对应的方法得到对应的参数值：</p>
<pre><code class="language-html">&lt;script&gt;
//定义一个 lay-done 对应的全局方法，以供动态模板执行
layui.data.sendParams = function(params){
  console.log(params.id) //得到传递过来的 id 参数（或其他参数）值
  
  //通过得到的参数值，做一些你想做的事
  //…

  //若需用到 layui 组件，layui.use 需写在该全局方法里面，如：
  layui.use(['table'], function(){
    var table = layui.table;
    table.render({
      elem: ''
      ,url: 'url?id='+ params.id
    });
  });
};
&lt;/script&gt;
</code></pre>
<blockquote>
<p>注意：上述实现需保证 layuiAdmin 为 1.2.0+`</p>
</blockquote>
<p>总之，驾驭好<code>view().render().done(callback)</code> 对您的项目开发至关重要。</p>
<h1 id="id唯一性"><strong>ID唯一性</strong></h1>
<hr>
<p>如果你开启了标签页功能，请务必注意 ID 的冲突，尤其是在你自己绑定事件的情况。ID 的命令可以遵循以下规则来规避冲突：</p>
<blockquote>
<p>LAY-路由-任意名</p>
</blockquote>
<p>以消息中心页面为例，假设它的路由为：<code>/app/message/</code>，那么 ID 应该命名为：</p>
<pre><code class="language-html"> &lt;button class=&quot;layui-btn&quot; id=&quot;LAY-app-message-del&quot;&gt;删除&lt;/button&gt;
</code></pre>
<h1 id="实用组件"><strong>实用组件</strong></h1>
<hr>
<h3 id="hover-提示层"><strong>Hover 提示层</strong></h3>
<p>通过对元素设置 lay-tips=&quot;提示内容&quot; 来开启一个 hover 提示，如：</p>
<pre><code class="language-html">&lt;i class=&quot;layui-icon layui-icon-tips&quot; lay-tips=&quot;要支持的噢&quot; lay-offset=&quot;5&quot;&gt;&lt;/i&gt;
</code></pre>
<p>其中<code>lay-offset</code>用于定于水平偏移距离（单位px），以调整箭头让其对准元素</p>
<h1 id="事件监听"><strong>事件监听</strong></h1>
<hr>
<ul>
<li><strong>hash</strong><br>
监听路由地址改变</li>
</ul>
<pre><code class="language-javascript">// 下述中的 xxx 可随意定义，不可与已经定义的 hash 事件同名，否则会覆盖上一事件
admin.on('hash(xxx)', function(router){
  console.log(router); //得到路由信息
});
</code></pre>
<ul>
<li><strong>side</strong><br>
监听侧边伸缩</li>
</ul>
<pre><code class="language-javascript">// 下述中的 xxx 可随意定义，不可与已经定义的 side 事件同名，否则会覆盖上一事件
admin.on('side(xxx)', function(obj){
  console.log(obj.status); //得到伸缩状态：spread 为展开状态，其它值为收缩状态
});
</code></pre>
<h1 id="兼容性"><strong>兼容性</strong></h1>
<hr>
<p>layuiAdmin 使用到了 layui 的栅格系统，而栅格则是基于浏览器的媒体查询。ie8、9不支持。<br>
所以要在宿主页面（如 start/index.html ）加上下面这段保证兼容：</p>
<pre><code class="language-html">&lt;!-- 让IE8/9支持媒体查询，从而兼容栅格 --&gt;
&lt;!--[if lt IE 9]&gt;
  &lt;script src=&quot;https://cdn.staticfile.org/html5shiv/r29/html5.min.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://cdn.staticfile.org/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;  
</code></pre>
<h1 id="缓存问题"><strong>缓存问题</strong></h1>
<hr>
<p>由于单页面版本的视图文件和静态资源模块都是动态加载的，所以可能存在浏览器的本地缓存问题，事实上我们也考虑到这个，因此，为了避免改动后的文件未及时生效，你只需在入口页面（默认为<code>start/index.html</code>）中，找到 <code>layui.config</code> ，修改其 <code>version</code>的值即可。</p>
<p>我们推荐你分场景来更新缓存：</p>
<blockquote>
<p>场景一：如果项目是在本地开发。你可以设置 version 为动态毫秒数，如：</p>
<p>version: new Date().getTime() //这样你每次刷新页面，都会更新一次缓存</p>
<hr>
<p>场景二：如果项目是在线上运行。建议你手工更新 version，如：</p>
<p>version: '1.0.0' //每次发布项目时，跟着改动下该属性值即可更-新静态资源的缓存</p>
</blockquote>
<h1 id="升级事项"><strong>升级事项</strong></h1>
<hr>
<p>从官网更新资源包后，除了 src 和 dist 目录需要注意一下，其它目录和文件均可覆盖，下面以 src 为例（dist 由于是 src 构建后生成的目录，所以本质是和 src 一样的）<br>
<strong>src 目录下可以直接覆盖的有：</strong></p>
<blockquote>
<ul>
<li>src/lib/</li>
<li>src/style/</li>
<li>src/index.js</li>
</ul>
</blockquote>
<p><strong>需要灵活调配的有：</strong></p>
<blockquote>
<ul>
<li>src/controller/</li>
<li>src/views/</li>
<li>src/config.js</li>
</ul>
</blockquote>
<p>如果没有改动默认配置，事实上 config.js 也可以覆盖升级开发过程中，建议同时运行两个 layuiAdmin 。一个是已经实际运用的，一个是 layuiAdmin 本身的 Demo。以便从 Demo 中获取参考和提取示例。</p>
<h1 id="源码构建"><strong>源码构建</strong></h1>
<hr>
<blockquote>
<p>当你在 src 目录完成开发后，你可通过 gulp 对 src 源码进行自动化构建，以生成用于线上环境的 dist 目录。并在入口页面中的 layui.config 的 base 参数指向 dist。</p>
</blockquote>
<p>在资源包中根目录下看到的 gulpfile.js 是 layuiAdmin 写好的任务脚本，package.json 是任务配置文件，你只需按照以下步骤：</p>
<ol>
<li>step1：确保你的电脑已经安装好了 Node.js，如果未安装，可去官网下载安装</li>
<li>step2: 命令行安装 gulp：npm install gulp -g</li>
<li>step3：切换到 layuiAdmin 项目根目录（即 gulpfile.js 所在目录），命令行安装任务所依赖的包：npm install</li>
</ol>
<p><strong>安装完成后，后续只需直接执行命令：gulp 即可完成 src 到 dist 目录的构建</strong></p>
<h1 id="关于版权"><strong>关于版权</strong></h1>
<hr>
<blockquote>
<p>layuiAdmin 受国家计算机软件著作权保护，未经官网正规渠道授权擅自公开产品源文件、以及直接对产品二次出售的，我们将追究相应的法律责任。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BatteryInfoView v1.23 汉化版]]></title>
        <id>https://acoldfront.github.io/post/batteryinfoview/</id>
        <link href="https://acoldfront.github.io/post/batteryinfoview/">
        </link>
        <updated>2020-10-07T04:44:33.000Z</updated>
        <summary type="html"><![CDATA[<p>BatteryInfoView 是一种小型实用程序，用于笔记本电脑和上网本计算机，可显示电池的当前状态和信息。显示的电池信息包括电池名称、制造名称、序列号、制造日期、电源状态（充电/放电）、当前电池容量、满电容量、电压、充电/放电速率等...<br>
BatteryInfoView 还提供一个日志窗口，该窗口每 30 秒或您选择的任何其他时间间隔添加一条包含电池状态的新日志行。</p>
]]></summary>
        <content type="html"><![CDATA[<p>BatteryInfoView 是一种小型实用程序，用于笔记本电脑和上网本计算机，可显示电池的当前状态和信息。显示的电池信息包括电池名称、制造名称、序列号、制造日期、电源状态（充电/放电）、当前电池容量、满电容量、电压、充电/放电速率等...<br>
BatteryInfoView 还提供一个日志窗口，该窗口每 30 秒或您选择的任何其他时间间隔添加一条包含电池状态的新日志行。</p>
<!-- more -->
<p>系统要求和限制<br>
此实用程序适用于任何版本的 Windows，从 windows 2000 开始，一至 Windows 10。<br>
某些信息（如序列号和制造日期）仅在电池提供此信息时才显示。<br>
<img src="https://acoldfront.github.io//post-images/1602046152348.png" alt="" loading="lazy"></p>
<h3 id="修改说明">修改说明</h3>
<hr>
<p>Crazer汉化</p>
<h3 id="下载地址">下载地址</h3>
<hr>
<p><a href="https://wws.lanzous.com/i7ktEh8kplg">链接: https://wws.lanzous.com/i7ktEh8kplg</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win10数字许可激活工具 Windows 10 Digital Activation Program 1.3.7 Final 中文版]]></title>
        <id>https://acoldfront.github.io/post/win10DigitalActivation/</id>
        <link href="https://acoldfront.github.io/post/win10DigitalActivation/">
        </link>
        <updated>2020-09-19T10:36:08.000Z</updated>
        <summary type="html"><![CDATA[<p>Windows 10 数字许可证旗舰版是一款简单易用的 Windows 10 永久激活工具，可使用数字许可证永久激活 Windows 10，在尝试激活系统时不需要使用激活密钥。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Windows 10 数字许可证旗舰版是一款简单易用的 Windows 10 永久激活工具，可使用数字许可证永久激活 Windows 10，在尝试激活系统时不需要使用激活密钥。</p>
<!-- more -->
<p>W10 Digital Activation 是由俄国大佬 Ratiborus 开发的一款用于 Windows 10 系统的数字权利激活工具。Ratiborus 其实针对微软的产品开发了不少激活类工具，比如 KMSAuto Net，AAct，Helper XP，KMSAuto Helper 等等，可以激活 XP、7、8、10 以及 Office 等等。在我们最常见的激活工具中多以 KMS 激活居多，但是大多数都是半年（180 天）激活，到期后还要再执行激活。而今天分享的 W10 Digital Activation 数字激活权利工具解决了 KMS 180 天的激活周期。</p>
<figure data-type="image" tabindex="1"><img src="https://acoldfront.github.io//post-images/1600512365016.png" alt="" loading="lazy"></figure>
<h2 id="windows-10-数字权利激活和非数字权利激活的区别">Windows 10 数字权利激活和非数字权利激活的区别：</h2>
<hr>
<p>“数字权利激活”：在保证不更换硬件的情况下激活会一直有效。不要更换电脑主板等相关硬件信息。<br>
“非数字权利激活”：密钥激活。这个密钥是放在你 Windows 系统里的是有次数限制，每天重新安装都是需要输入密钥的。只要换了系统就需要重新输入。</p>
<p>根据获取 Windows 10 副本的方式，激活将使用“数字权利”或 25 个字符的产品密钥（即“非数字权利激活”）。<br>
“数字权利”：在不更换硬件的情况下一直有效，无论安装的是“正式版”还是“预览版”。数字权利会记录您的设备硬件信息，在设备没有更换主要硬件（例如主板）的情况下会连接微软服务器自动激活，不再需要手动输入产品密钥。<br>
“非数字权利激活”：即密钥激活。这个密钥是放在你 Window 系统里的是有次数限制，每天重新安装都是需要输入密钥的。</p>
<p>区别在于：“密钥激活”只要换了系统就需要重新输入密钥。“数字激活”只要你的电脑配置没变。它就会自动识别。</p>
<h2 id="kms-激活不是激活永久">KMS 激活不是激活永久</h2>
<hr>
<p>你可以使用以下方法查看：<br>
1、同时按 Win+R 键打开“运行”，输入 slmgr.vbs -xpr 回车。<br>
2、同时按 Win+R 键打开“运行”，输入 slmgr.vbs -dlv 回车，里面没有日期限止提示，就是永久激活。<br>
3、同时按 Win+R 键打开“运行”，输入 winver 回车，里面没有日期限止提示，就是永久激活。<br>
注意：第 1 和 2 方法的 vbs 和 – 之间有一个空格。</p>
<h2 id="下载地址">下载地址</h2>
<hr>
<p>注意，本工具容易报毒<br>
<a href="https://wws.lanzous.com/isuvigrl2ab">链接：https://wws.lanzous.com/isuvigrl2ab</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HEU KMS Activator(win+office激活) 19.6.3]]></title>
        <id>https://acoldfront.github.io/post/heu-kms/</id>
        <link href="https://acoldfront.github.io/post/heu-kms/">
        </link>
        <updated>2020-09-19T10:29:24.000Z</updated>
        <summary type="html"><![CDATA[<p>HEU KMS Activator适用于 Windows、Office 及 VL 版本，无需联网即可一键激活，离线全自动激活软件。</p>
]]></summary>
        <content type="html"><![CDATA[<p>HEU KMS Activator适用于 Windows、Office 及 VL 版本，无需联网即可一键激活，离线全自动激活软件。</p>
<!-- more -->
<p>它是基于MDL论坛的KMS 服务端模拟环境“KMS Server Emulator”而制作的一款简洁高效的 KMS 激活工具。KMS服务是微软公司对 Windows 以及 Office 等的批量授权服务，大家可以利用KMS来激活局域网中的产品。并且这款工具是利用在系统内部搭建 KMS 服务器，因此无论是 Windows 还是 Office 都可轻易进行激活。想要无需花一分钱就能轻松地激活使用Windows和office嘛，用小编这款软件就对了，它是单一可执行的绿色工具，使用完毕后对系统无任何残留，可以直接删除。保持以往的风格，关键是软件不会夹带其他软件下载，非常的安全，值得注意的是本款软件可能会出现报毒情况，最好先关闭电脑安全保护再运行软件。</p>
<figure data-type="image" tabindex="1"><img src="https://acoldfront.github.io//post-images/1600511650590.png" alt="" loading="lazy"></figure>
<h2 id="校验信息">校验信息</h2>
<hr>
<p>文件大小：5059092 字节<br>
MD5 ：606E3AF0BE7ECDEC1338877E2DF5FC3F<br>
SHA1 ：4673C4BD6A48A15D89B0BDE42604459472B6170A<br>
CRC32 ：88A89A26</p>
<h2 id="下载地址">下载地址</h2>
<hr>
<p>注意，本工具容易报毒<br>
<a href="https://wws.lanzous.com/iB9itgrkbed">链接：https://wws.lanzous.com/iB9itgrkbed</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows 10 企业版2019 LTSC 2019 Build 17763.1457]]></title>
        <id>https://acoldfront.github.io/post/windows-10Enterprise/</id>
        <link href="https://acoldfront.github.io/post/windows-10Enterprise/">
        </link>
        <updated>2020-09-19T10:20:10.000Z</updated>
        <summary type="html"><![CDATA[<p>Windows 10 企业版 2019 长期服务版于2018年11月初正式推出，系统版本为1809，OS内部版为17763。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Windows 10 企业版 2019 长期服务版于2018年11月初正式推出，系统版本为1809，OS内部版为17763。</p>
<!-- more -->
<p>Windows 10 Enterprise LTSC相对Windows 10企业版来说，不会获得功能更新和改善，只有安全更新，提供了升级控制选项。LTSC版本可以称为官方Win10精简版。如果你需要全新安装，或者想收藏分享，本页面采集刷选整理出了微软官方原版的下载链接，完全可靠。另外附上Win10 LTSC2019永久激活工具。</p>
<h3 id="新版变化">新版变化</h3>
<hr>
<p>Windows 10 版本信息<br>
docs.microsoft.com/zh-cn/windows/release-information</p>
<p>Windows产品的更新策略，通常每月第二个周二为惯例发布产品更新。</p>
<p>2020.09.08 Windows 10 LTSC, Version 1809 with Update 17763.1457<br>
support.microsoft.com/zh-cn/help/4570333</p>
<p>Windows 10 企业版 2019 LTSC 新增功能<br>
docs.microsoft.com/zh-cn/windows/whats-new/ltsc/whats-new-windows-10-2019</p>
<h3 id="版本介绍">版本介绍</h3>
<hr>
<p>Windows 10 Enterprise 2019 LTSC，提供长期支持至2029年01月09日，Win10企业版2019长期服务版，相当于就是官方Win10精简版，目前不支持数字权利激活。它没有应用商店、Edge浏览器、OneDriver、微软小娜，有更新控制选项，Windows 更新可选是否下载和安装补丁，其它版本相比长期服务版就没有。</p>
<h3 id="关于激活">关于激活</h3>
<hr>
<p>Windows 10 Enterprise 2019 LTSC 在线永久激活密钥<br>
Product Key :6NVRR-HFW8Y-R9YJV-QTFFD-PYWR2</p>
<h3 id="下载地址">下载地址</h3>
<hr>
<h2 id="更新补丁">更新补丁</h2>
<p><strong>Windows 10 LTSC 1809 Update 17763.1457 官方累积更新补丁 [2020/09/08]</strong><br>
Windows 10, Windows 10 LTSB Version 1809 版本的2020年9月累积更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4570333">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4570333</a></p>
<p>Windows 10, Windows 10 LTSB Version 1809 的2020年9月服务堆栈更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4570332">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4570332</a></p>
<p>Windows 10 Version 1809 的.NET Framework 3.5/4.8的20年9月累积更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4576483">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4576483</a></p>
<p>Adobe Flash Player for Windows 10 所有版本的2020年6月安全更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4561600">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4561600</a></p>
<h2 id="完整镜像">完整镜像</h2>
<p><strong>Windows 10企业版2019长期服务版官方简体中文正式版ISO镜像 [2019/03/15]</strong><br>
MVS (MSDN) Windows 10 Enterprise 2019 LTSC v1809 (OS build 17763.316)</p>
<p>//世纪互联分流地址不限速高速下载（备用地址还可将链接中1改4或16）</p>
<pre><code>https://pan.tangmn.cn/show/1/MSDN/cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso

https://pan.tangmn.cn/show/1/MSDN/cn_windows_10_enterprise_ltsc_2019_x86_dvd_1814dbab.iso
</code></pre>
<h2 id="ed2k">ed2k</h2>
<p>Windows 10 Enterprise 2019 LTSC (x64) – DVD (Chinese-Simplified)<br>
文件名：cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso<br>
SHA-1：24B59706D5EDED392423936C82BA5A83596B50CC<br>
发布时间：2019-03-15  文件大小：4.17GB</p>
<pre><code>ed2k://|file|cn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso|4478906368|E7C526499308841A4A6D116C857DB669|/
</code></pre>
<p>Windows 10 Enterprise 2019 LTSC (x86) – DVD (Chinese-Simplified)<br>
文件名：cn_windows_10_enterprise_ltsc_2019_x86_dvd_1814dbab.iso<br>
SHA-1：BA2169EDD94F123211CD4AACA68352F1AB6195D9<br>
发布时间：2019-03-15  文件大小：2.98GB</p>
<pre><code>ed2k://|file|cn_windows_10_enterprise_ltsc_2019_x86_dvd_1814dbab.iso|3196803072|2D39C54A2E99BAC308191C74A15B3237|/
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows10 20H1(v2004 Build19041.508) MSDN原版ISO镜像+累计更新]]></title>
        <id>https://acoldfront.github.io/post/windows10-20h1v2004/</id>
        <link href="https://acoldfront.github.io/post/windows10-20h1v2004/">
        </link>
        <updated>2020-09-19T10:10:13.000Z</updated>
        <summary type="html"><![CDATA[<p>5月12日，Windows 10今年的首个正式版v2004（五月更新）抵达MSDN，供开发者率先体验。</p>
]]></summary>
        <content type="html"><![CDATA[<p>5月12日，Windows 10今年的首个正式版v2004（五月更新）抵达MSDN，供开发者率先体验。</p>
<!-- more -->
<p>经查，国内网友熟悉的MSDNITELLYOU也同步公开了四大原版ISO镜像文件（简体中文版）的下载，如果你有纯净安装的需求或者迫不及待想要尝鲜，可下载使用。</p>
<p>对于新老系统，个人比较推荐的是WinPE安装，维护较为方便，工具可选微PE、优启通等制作U启工具。直接制作启动盘、校验SHA等，可参考快科技之前的文章。</p>
<p>据悉，Windows 10 v2004带来了新的全局/资源管理器搜索、蓝牙设备智能配对、新的Cortana、新的虚拟桌面、基于Chromium的Edge浏览器、任务管理器支持查看GPU温度、新的设置页面等。</p>
<h3 id="累计更新">累计更新</h3>
<hr>
<p>Windows 10 v2004 Update 19041.508 官方累积更新补丁 [2020/09/08]<br>
Windows 10 Version 2004 版本的 2020年9月累积更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4571756">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4571756</a></p>
<p>Windows 10 Version 2004 版本的 2020年9月服务堆栈更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4571756">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4577266</a></p>
<p>Windows 10 Version 2004 的 .NET Framework 3.5和4.8的2020年9月累积更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4571756">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4569745</a></p>
<p>Windows 10 v2004 Update 19041.388 官方累积更新补丁【2020/07/14】<br>
适用于 Windows Version 2004 版本的 2020年7月累积更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4571756">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4565503</a></p>
<p>适用于 Windows 10 Version 2004 的 2020年7月服务堆栈更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4571756">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4566785</a></p>
<p>适用于 Adobe Flash Player for Windows 10 所有版本的2020年6月安全更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4571756">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4561600</a></p>
<p>适用于 Windows 10 Version 2004 的 .NET Framework 3.5和4.8的累积更新<br>
<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4571756">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4565627</a></p>
<h3 id="官方原版镜像">官方原版镜像</h3>
<hr>
<blockquote>
<p>消费者版（家庭版、家庭单语言版、教育版、专业版、专业教育版、专业工作站版）</p>
</blockquote>
<p>cn_windows_10_consumer_editions_version_2004_updated_aug_2020_x64_dvd_0db4f0fa.iso<br>
SHA-1:0093D88CCD2EBABAB54FDC217A942F5D83E3DDF3<br>
架构：x64，文件大小：5.01GB</p>
<pre><code>ed2k://|file|cn_windows_10_consumer_editions_version_2004_updated_aug_2020_x64_dvd_0db4f0fa.iso|5381101568|3AEEAEFEA750F57B58BC101B3CF895EC|/
</code></pre>
<p>cn_windows_10_consumer_editions_version_2004_updated_aug_2020_x86_dvd_802b0678.iso<br>
SHA-1: B242F836FE9182C83CE6A4BD819296B9C3F39563<br>
架构：x86，文件大小：3.6GB</p>
<pre><code>ed2k://|file|cn_windows_10_consumer_editions_version_2004_updated_aug_2020_x86_dvd_802b0678.iso|3863203840|37ED408A8836B38067787564FCC7D988|/
</code></pre>
<blockquote>
<p>商业版（教育版、企业版、专业版、专业教育版、专业工作站版等）</p>
</blockquote>
<p>cn_windows_10_business_editions_version_2004_updated_aug_2020_x64_dvd_4077da77.iso<br>
SHA-1: 6C3A19335CB30116DA517FE7F4C6A169A70109D<br>
架构：x64，文件大小：4.91GB</p>
<pre><code>ed2k://|file|cn_windows_10_business_editions_version_2004_updated_aug_2020_x64_dvd_4077da77.iso|5275471872|DE5F8B777F1B5258EF93E7C9990F2715|/
</code></pre>
<p>cn_windows_10_business_editions_version_2004_updated_aug_2020_x86_dvd_4e6a121d.iso<br>
SHA-1: 9C58E678A92A52D6AB6B9AE2AC039858FF7FE352<br>
架构：x86，文件大小：3.52GB</p>
<pre><code>ed2k://|file|cn_windows_10_business_editions_version_2004_updated_aug_2020_x86_dvd_4e6a121d.iso|3784398848|FCF58EA6C0C3F86B4FAC07EAB8A29D46|/
</code></pre>
<h3 id="第三方整合版本">第三方整合版本</h3>
<hr>
<p>@远景Win10版主ananhaid</p>
<p>by ananhaidの远景Win10版主<br>
– 这里的是官方前面8个加转换后面4个总共12个集成发布。<br>
– 源基准为官方镜像，没有添加任何三方数据，母本选用VB-2004官方ISO制作,。<br>
– 使用工具只有 DISM，没有删减任何内容，完全原版。系统镜像为 ESD 格式生成的 ISO。<br>
12合1：直接选取所需版本即可安装，也支持安装之后使用其他密钥转换版本，包含版本为：<br>
家庭版、专业版、企业版、教育版、专业工作站版、专业教育版、家庭单语言版、家庭中文版、适用于虚拟桌面的 Windows 10 企业版、IoT 企业版、专业仅中文版、专业单语言版。</p>
<p>启用系统功能：<br>
.NET Framework 3.5<br>
集成更新补丁：<br>
KB4577266（20年9月服务堆栈更新）（9月9日）<br>
KB4571756（20年9月累积更新 19041.508）（9月9日）<br>
KB4576478（20年9月 .net 4.8更新）（9月9日）<br>
KB4561600（20年6月 Adobe Flash Player 安全更新）（7月15日）</p>
<p>Windows 10 v2004 原版集成2020年7月累积更新ISO镜像12合1<br>
Windows 10 version 2004 (OS build 19041.388) x86/x64 AIO 12in1 Jule 2020</p>
<p><a href="https://cloud.189.cn/t/rmYN7zEbqq6z">https://cloud.189.cn/t/rmYN7zEbqq6z</a> 访问码c4ra</p>
<h3 id="关于激活">关于激活</h3>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据库管理工具 PremiumSoft Navicat Premium v15.0.18 中文特别版]]></title>
        <id>https://acoldfront.github.io/post/navicat-premium/</id>
        <link href="https://acoldfront.github.io/post/navicat-premium/">
        </link>
        <updated>2020-09-18T04:55:18.000Z</updated>
        <summary type="html"><![CDATA[<p>Navicat premium是一款数据库管理工具。将此工具连接数据库，你可以从中看到各种数据库的详细信息。包括报错，等等。当然，你也可以通过他，登陆数据库，进行各种操作。Navicat Premium是一个可多重连线资料库的管理工具，它可以让你以单一程式同时连线到 MySQL、SQLite、Oracle 及 PostgreSQL 资料库，让管理不同类型的资料库更加的方便。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Navicat premium是一款数据库管理工具。将此工具连接数据库，你可以从中看到各种数据库的详细信息。包括报错，等等。当然，你也可以通过他，登陆数据库，进行各种操作。Navicat Premium是一个可多重连线资料库的管理工具，它可以让你以单一程式同时连线到 MySQL、SQLite、Oracle 及 PostgreSQL 资料库，让管理不同类型的资料库更加的方便。</p>
<!-- more -->
<p>Navicat Premium结合了其他Navicat成员的功能。有了这种连线到不同资料库类型的能力，Navicat Premium支持在 MySQL、SQLite、Oracle 及 PostgreSQL 之间传输资料。它支持大部分的 MySQL、SQLite、Oracle 及 PostgreSQL 功能，包括预存程序、事件、触发器、函式、检视等。<br>
Navicat Premium可以让你简单并快速的在多种资料库系统间传输资料，或传输一份以SQL格式及编码设计的纯文字档。<br>
不同的资料库的批次处理任务也可以设定排程并在指定的时间执行。其他功能包括汇入/汇出精灵、查询建立工具、报表产生器、资料同步、备份、工作排程及更多。</p>
<p>Navicat的的功能足以提供专业开发人员的所有需求，但是对资料库伺服器的新手来说又相当容易学习。<br>
Navicat Premium [2] 有三种平台版本- Microsoft Windows、Mac OS X及Linux。它可以让使用者连接本地/远端伺服器、提供一些实用的工具如资料/结构同步、汇入/汇出、备份/回复及报表以协助管理资料的流程。</p>
<p>Navicat Premium(导航猫数据库管理)是一个可多重连线资料库的管理工具，Navicat Premium(导航猫数据库管理)可以让你以单一程式同时连线到MySQL、SQLite、Oracle 及 PostgreSQL资料库，让管理不同类型的资料库更加的方便。 　Navicat Premium可以让你简单并快速的在多种资料库系统间传输资料，或传输一份以SQL格式及编码设计的纯文字档。</p>
<p>不同的资料库的批次处理任务也可以设定排程并在指定的时间执行。其他功能包括汇入/汇出精灵、查询建立工具、报表产生器、资料同步、备份、工作排程及更多。</p>
<p>Navicat的的功能足以提供专业开发人员的所有需求，但是对资料库伺服器的新手来说又相当容易学习。<br>
<img src="https://acoldfront.github.io//post-images/1580014704119.png" alt="" loading="lazy"></p>
<p>Navicat Cloud<br>
Navicat 提供 Navicat Cloud 服务给用户。同步你的连接设置、模型、查询和虚拟组到云。这样你就能随时随地实时访问他们。有了 Navicat Cloud，你可以善用一天中的每分每秒，以最大限度提高你的工作效率。了解更多›</p>
<p>安全连接<br>
Navicat 可以让你通过 SSH 通道创建安全的 SSH 阶段作业，确保两台主机之间的连接受到强大验证和安全加密的保护。验证方式可使用密码或公钥和私钥对。Navicat 亦支持 HTTP 通道，让你灵活地绕过限制直接数据库服务器连接的互联网服务供应商。</p>
<p>对象设计器<br>
使用专业的对象设计器创建、修改和设计所有数据库对象，例如：表、视图、函数、过程、索引、触发器和序列。无需编写复杂的 SQL 来创建和编辑对象，你会知道你正使用什么选项。</p>
<p>表查看器<br>
网格或表单查看<br>
使用网格查看添加、修改和删除记录。用类似数据表的功能浏览网格查看，例如排序和隐藏数据组，使用我们的助理编辑器：备注、十六进制、图像或更多</p>
<p>你也可以用表单查看操作记录。清楚显示记录的字段名和其值，不必担心误解数据。</p>
<p>外键数据选择<br>
在你的数据库使用外键关系锚定参考的查找表，并自动建立下拉列表。无需持续对照参考主表，你可以简化你的工作流程和提升效率。<br>
SQL 创建工具或编辑器</p>
<p>SQL 创建工具<br>
视觉化 SQL 创建工具让你创建和编辑查询或视图，而不必担心语法和正确命令的用法。选择你想在表中执行的操作，它会为你编写 SQL 语句。</p>
<p>自动完成代码<br>
使用我们的自动完成代码功能，能快速地在 SQL 编辑器中创建 SQL 语句。无论你想选择的是数据库对象的属性或 SQL关键字，你只需从下拉列表中选择。</p>
<p>数据库设计器<br>
逆向工程<br>
使用 Navicat 的逆向工程，你可以从一个现有的数据库创建数据库模型，可视化地显现和编辑你的数据库结构或创建一个图形模型，并由模型生成一个数据库。</p>
<p>正向工程和脚本生成<br>
同步到数据库功能给你充分了解所有数据库的差异。生成必要的同步脚本来更新目标数据库，并使其与模型相同。</p>
<p>导出 SQL 让你有机会全面控制最终的 SQL 脚本，生成参照完整性规则，生成模型的独立部份、注释、字符集等。它可以节省你的工作时间。</p>
<p>PL/SQL 代码调试器<br>
PL/SQLPL/PGSQL<br>
PL/SQL 调试器提供的功能，如设置断点，步进通过程序，查看和修改变量值，及查看调用堆栈。你可以直接从 Navicat 的工作区中调试 PL/SQL 代码如过程和函数、对象方法和触发器。</p>
<p>数据处理工具<br>
导入或导出向导<br>
从不同格式的文件导入数据到表，例如 Access、Excel、XML、TXT、CSV、JSON 及更多。而且，在设置数据源连接后，你可以从 ODBC 导入数据。只需简单地选择你要导入的表，或使用添加查询按钮指定查询。同样，你可以将数据导出到各种格式，如 Excel、TXT、CSV、DBF、XML 等。</p>
<p>数据传输<br>
在多个不同的数据库系统间轻松地传输数据 – MySQL、MariaDB、SQL Server、Oracle、PostgreSQL 和 SQLite 数据库。你可以选择以指定的 SQL 格式和编码导出数据为 SQL 文件。这个功能可大大的简化迁移数据的进程。</p>
<p>数据或结构同步<br>
从一个数据库中以详细的分析进程传输数据到另外一个数据库。同样，你可以比对并修改表的结构。在数据和结构同步中，目标数据库可以在源服务器，也可以在其他的服务器。</p>
<p>备份或还原<br>
定期备份数据库对用户是相当重要的。备份或还原全部表、记录、视图等。如果数据损坏，不用再重做，让你能高枕无忧。</p>
<p>计划<br>
不同数据库的设置文件可以创建在单一批处理作业，这样你就可以设置计划并在指定的时间运行。批处理作业可以创建的对象包括打印报表、数据库备份、查询、数据传输、数据同步、导入和导出。当任务完成后，Navicat 可自动传送电子邮件通知给你指定的收件人。此外，导出的文件或打印的报表可以添加到批处理作业作为电子邮件附件，让你可以轻易与其他人共享你的数据。<br>
报表创建工具或查看器 *只限于 Windows 版本</p>
<p>使用我们的用户友好 GUI 报表创建工具创建各种不同类型的报表。设计发票、统计、邮寄标签及更多其他报表。输出报表到多种格式 – text、PDF、Lotus、Excel、Graphic、Html 及更多。</p>
<p>Navicat Report Viewer 可让你浏览由报表创建工具设计的报表。最酷的是你可以与计算机沒有安装 Navicat，但安装了 Navicat Report Viewer 的人共享报表。</p>
<p>实用工具<br>
ER 图表<br>
ER 图表查看能通过以图形格式显示数据库结构来帮助你了解你的数据库，让你可以看到数据库中表之间的关联。</p>
<p>连接颜色或虚拟组<br>
连接颜色功能可以让你立刻知道你连接到哪个服务器。显示在子窗口工具栏的颜色指示，用于识别连接和它们的数据库对象。虚拟组功能分类对象到不用的组，令对象和连接有一个更好的组织。</p>
<p>树或对象筛选<br>
使用树或对象筛选功能收窄显示数据对象的列表。简单地需输入文本，然后只会显示符合指定字符串开始的数据库对象。</p>
<p>收藏夹<br>
Navicat 让你更容易地回到你常访问的数据库对象。通过添加路径到收藏夹列表，你只需一次点击就可以打开这些数据库对象。</p>
<p>系统需求<br>
Windows<br>
Microsoft Windows XP SP3、Vista、Windows 7、Windows 8、Windows 8.1、Windows 10、Server 2003、Server 2008、Server 2012</p>
<p>Mac<br>
Mac OS X 10.7 或以上版本<br>
Intel 处理器</p>
<p>Linux<br>
Ubuntu 12.04、Ubuntu 14.04、CentOS 6.7、CentOS 7、Fedora 22、Fedora 23、Linux Mint 13、Linux Mint 17.3、openSUSE 13.2、openSUSE 42.1</p>
<h3 id="修改说明">修改说明</h3>
<hr>
<p>基于DeltaFox大神Navicat_Keygen_Patch_v5.6  Crazer汉化</p>
<h3 id="使用提示">使用提示</h3>
<hr>
<p>使用前查看“使用说明&quot;文档<br>
或者<br>
<a href="https://acoldfront.github.io/post/navicat-keygen-patch/">查看Navicat产品_补丁_注册机 使用教程</a></p>
<h3 id="下载地址">下载地址</h3>
<hr>
<p><a href="https://pan.baidu.com/s/1N32CbhM_-hIUdH_8zVzOPg">链接: https://pan.baidu.com/s/1N32CbhM_-hIUdH_8zVzOPg 提取码: 4vgd</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[优秀代码编辑器 Sublime Text 4.0.4085]]></title>
        <id>https://acoldfront.github.io/post/SublimeText/</id>
        <link href="https://acoldfront.github.io/post/SublimeText/">
        </link>
        <updated>2020-09-09T16:43:52.000Z</updated>
        <summary type="html"><![CDATA[<p>SublimeText是编辑器中的一款神级IDE，非常有名，虽然比较轻量，但是呢软件拓展性非常强大，适用于多种编程语言，当然，当一个编辑器，也是非常不错的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>SublimeText是编辑器中的一款神级IDE，非常有名，虽然比较轻量，但是呢软件拓展性非常强大，适用于多种编程语言，当然，当一个编辑器，也是非常不错的。</p>
<!-- more -->
<p>Sublime Text 是一个轻量、简洁、高效、跨平台的编辑器，方便的配色以及兼容vim快捷键等各种优点博得了很多前端开发人员的喜爱!Sublime Text 这款程序员必备代码编辑器，几乎每位程序员提到Sublime Text 2都是赞不绝口！它体积小巧，无需安装，绿色便携；它可跨平台支持Windows/Mac/Linux；支持32与64位操作系统，它在支持语法高亮、代 码补全、代码片段（Snippet）、代码折叠、行号显示、自定义皮肤、配色方案等所有其它代码编辑器所拥有的功能的同时，又保证了其飞快的速度！还有着 自身独特的功能，比如代码地图、多种界面布局以及全屏免打扰模式等，这些优秀特性让Sublime Text 2成了所有程序员眼中的神！</p>
<p>SublimeText支持但不限于 C, C++, C#, CSS, D, Erlang, HTML, Groovy, Haskell, HTML, Java, JavaScript, LaTeX, Lisp, Lua, Markdown, Matlab, OCaml, Perl, PHP, Python, R, Ruby, SQL, TCL, Textile and XML 等主流编程语言的语法高亮。ST 拥有优秀的代码自动完成功能 (自动补齐括号，大括号等配对符号；自动补全已经出现的单词；自动补全函数名)，非常智能；</p>
<h3 id="更新日志">更新日志</h3>
<hr>
<p>*定义悬停弹出式菜单显示有关符号的详细信息</p>
<p>*“转到符号”显示有关符号的详细信息</p>
<p>*现在可以将trim_training_white_space_on_save设置为“not_unu caret”</p>
<p>*在鼠标选择的同时，改进了滚动上下文线的行为</p>
<p>*修复了大型连字符号的呈现</p>
<p>*minihtml：添加了对显示的支持：内联块和文本对齐</p>
<p>*minihtml：添加了对标题属性工具提示的支持</p>
<p>*API:已添加崇高符号区以及升华符号在视图和窗口上有相应的方法</p>
<h3 id="修改说明">修改说明</h3>
<hr>
<p>基于最新版本绿色便携制作</p>
<p>增强侧边栏</p>
<p>集成破解补丁，集成汉化，允许切换语言</p>
<h3 id="下载地址">下载地址</h3>
<hr>
<p><a href="https://wws.lanzous.com/iiCkQgifqje">链接: https://wws.lanzous.com/iiCkQgifqje</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bandizip(跨平台解压缩软件) v7.10 企业激活版]]></title>
        <id>https://acoldfront.github.io/post/bandizip/</id>
        <link href="https://acoldfront.github.io/post/bandizip/">
        </link>
        <updated>2020-09-08T08:53:47.000Z</updated>
        <summary type="html"><![CDATA[<p>虽然 7-Zip 是开源免费压缩工具中的佼佼者，但用得不是很顺手，今天试了下推荐的 Bandizip 却出人意料的好用！Bandizip 是一款来自韩国的免费优秀的文件压缩/解压缩软件，支持 Win 与 Mac，操作方式与 WinRAR 相似，支持压缩和解压 rar、zip、7z 等众多主流格式…</p>
]]></summary>
        <content type="html"><![CDATA[<p>虽然 7-Zip 是开源免费压缩工具中的佼佼者，但用得不是很顺手，今天试了下推荐的 Bandizip 却出人意料的好用！Bandizip 是一款来自韩国的免费优秀的文件压缩/解压缩软件，支持 Win 与 Mac，操作方式与 WinRAR 相似，支持压缩和解压 rar、zip、7z 等众多主流格式…</p>
<!-- more -->
<h3 id="主要功能">主要功能</h3>
<hr>
<p>支持操作系统: Windows Vista/7/8/10 (x86/x64/ARM64)<br>
许可类型：免费软件(EULA)<br>
全能的压缩/解压/浏览/编辑软件<br>
可提取30多种格式，包括RAR/RAR5/7Z/ZIP等<br>
包含密码压缩和分卷压缩功能<br>
支持多核高速压缩</p>
<h3 id="压缩">压缩</h3>
<hr>
<p>支持的格式: ZIP, 7Z(lzma2), ZIPX(xz), EXE(sfx), TAR, TGZ, LZH(lh7), ISO(joliet), GZ, XZ<br>
ZIP文件修改（添加/删除/重命名）<br>
支持多核并行，压缩速度可提升至多达6倍<br>
加密压缩<br>
支持AES256加密算法<br>
支持4GB 以上大小的文件压缩<br>
对ZIP格式支持Unicode或MBCS文件名<br>
对ZIP/7z格式可进行分卷压缩</p>
<h3 id="解压">解压</h3>
<hr>
<p>支持的格式: 7Z, ACE, AES, ALZ, ARJ, BH, BIN, BZ, BZ2, CAB, Compound(MSI), EGG, GZ, IMG, ISO, ISZ, LHA, LZ, LZH, LZMA, PMA, RAR, RAR5, SFX(EXE), TAR, TBZ, TBZ2, TGZ, TLZ, TXZ, UDF, WIM, XPI, XZ, Z, ZIP, ZIPX, ZPAQ<br>
轻松查看压缩包内文件<br>
可只解压选定文件，支持拖拽解压<br>
可对ZIP和RAR格式添加注释<br>
一步解压TGZ/TBZ格式的文件</p>
<h3 id="功能多样">功能多样</h3>
<hr>
<p>测试文件完整性以确定压缩包是否损坏<br>
支持修改代码页改<br>
可集成至资源管理器右键菜单<br>
<img src="https://acoldfront.github.io//post-images/1587459441655.png" alt="" loading="lazy"></p>
<h3 id="更新日志">更新日志</h3>
<hr>
<p><a href="https://www.bandisoft.com/bandizip/history/">https://www.bandisoft.com/bandizip/history/</a></p>
<h3 id="破解教程">破解教程</h3>
<hr>
<p>7系列版本，安装后，下载破解补丁，破解后，使用激活码如下激活码</p>
<p>20380808-ENT000002-0E34A52561-166371E0</p>
<p>20380808-PRO0BFAEBFDAE23C425E-173E2DF1</p>
<p>邮箱地址：可任意填写，即随意填个假冒邮箱格式</p>
<h3 id="下载地址">下载地址</h3>
<hr>
<p>Bandizip各版本功能比较（自v7.0开始分为标准版/专业版/企业版）<br>
<a href="https://www.bandisoft.com/bandizip/help/edition-comparison">https://www.bandisoft.com/bandizip/help/edition-comparison</a></p>
<p>官网下载<br>
6系列版本：【原生无广告】<br>
<a href="https://dl.bandisoft.com/bandizip/BANDIZIP-SETUP.EXE">安装版：https://dl.bandisoft.com/bandizip/BANDIZIP-SETUP.EXE</a></p>
<p><a href="https://dl.bandisoft.com/bandizip/BANDIZIP-PORTABLE-GL-32BIT.ZIP">32位便携版：https://dl.bandisoft.com/bandizip/BANDIZIP-PORTABLE-GL-32BIT.ZIP</a></p>
<p><a href="https://dl.bandisoft.com/bandizip/BANDIZIP-PORTABLE-GL-64BIT.ZIP">64位便携版：https://dl.bandisoft.com/bandizip/BANDIZIP-PORTABLE-GL-64BIT.ZIP</a></p>
<p>7系列版本：<br>
<a href="http://dl.bandisoft.com/bandizip.std/BANDIZIP-SETUP-STD-ALL.EXE">安装版：http://dl.bandisoft.com/bandizip.std/BANDIZIP-SETUP-STD-ALL.EXE</a></p>
<p>下载链接：<br>
<a href="https://wws.lanzous.com/ilEJagifxvi">链接: https://wws.lanzous.com/ilEJagifxvi</a></p>
]]></content>
    </entry>
</feed>